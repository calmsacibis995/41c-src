(File expr.l)
(d-dotailrecursion lambda e-goto + |1-| list bigp not zerop * length e-write4 e-write3 d-pushargs let terpri niceprint patom comp-msg progn comp-note cons makecomment cdr |1+| setq incr cdar greaterp caar quote or car dtpr return null do eq and cond If)
(d-bcdcall lambda * cons quote e-write3)
(d-calldirect lambda * cons quote e-write3)
(d-calltran lambda d-tranloc concat * cons quote e-write3)
(d-callbig lambda d-clearreg *throw throw |1+| terpri or niceprint patom comp-msg progn comp-err putprop d-calltran d-bcdcall cdr - length nthcdr car e-write2 d-pushargs d-dotailrecursion cond If quote list cons setq forcecomment get let)
(d-cxxr lambda cons or return null setq cdr do car quote eq cond If explodec let)
(d-pushargs lambda cdr |1+| incr cons setq Push car d-exp null quote do cond If)
(d-argcheckit lambda greaterp > cdr comp-warn *throw throw |1+| setq terpri terpr difference niceprint patom comp-msg progn comp-err eq lessp < car and cond If)
(d-argnumchk lambda d-argcheckit cond If cdr length quote get car let)
(d-exps lambda car cdr null do d-exp)
(d-exp lambda comp-warn c-lambexp *throw throw |1+| terpri niceprint patom comp-msg progn comp-err d-handlearrayref list d-callbig cadr cc-cxxr length d-argcheckit d-cxxr or Internal-bcdcall getdisc bcdp cxr getd symbolp funcall d-argnumchk cdr d-allfixnumargs go equal apply eq memq quote d-functyp putprop cons Push get not and car return d-handlecc d-move d-tst null d-loc setq atom cond If prog)
